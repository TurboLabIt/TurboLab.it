<?php
namespace App\Command;

use App\Entity\PhpBB\Forum;
use App\Service\Cms\Article;
use App\Service\Factory;
use DOMDocument;
use DOMXPath;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use TurboLabIt\BaseCommand\Command\AbstractBaseCommand;
use TurboLabIt\BaseCommand\Service\ProjectDir;
use Twig\Environment;


/**
 * 📚 https://github.com/TurboLabIt/TurboLab.it/blob/main/docs/forum-integration.md
 */
#[AsCommand(name: 'ForumIntegrationBuilder', description: 'Build the site-forum integration files')]
class ForumIntegrationBuilderCommand extends AbstractBaseCommand
{
    public function __construct(protected ProjectDir $projectDir, protected Environment $twig, protected Factory $factory)
    {
        parent::__construct();
    }


    protected function execute(InputInterface $input, OutputInterface $output) : int
    {
        parent::execute($input, $output);

        $this->fxTitle("Output path...");
        $outputDir = $this->getProjectDir('src/Forum/ext-turbolabit/forumintegration/styles/prosilver/template/event');
        $this->fxInfo("##$outputDir##");

        $this->fxTitle("Recreating output path...");
        $this->deleteDirectory($outputDir);
        mkdir($outputDir, 0777, true);

        $generatedFileBanner =
            '{# ⚠️ Autogenerated file! Don\'t edit! 📚 https://github.com/TurboLabIt/TurboLab.it/blob/main/docs/forum-integration.md #}' . PHP_EOL;

        $arrTpl = [
            "overall_header_head_append"    => "01-header",
            "overall_header_content_before" => [
                'sourceTwig'    => '09-overall-header',
                'params'        => $this->buildHeaderParams()
            ],
            ////"index_body_markforums_after"               => "05-listing",
            ////"viewforum_body_topic_row_before"           => "05-listing",
            "ucp_agreement_terms_before" => [
                'sourceTwig'    => "registrazione",
                'params'        => $this->buildRegisterParams()
            ],
            "viewtopic_body_post_buttons_after" => [
                'sourceTwig'    => "post-buttons",
                'params'        => $this->buildPostButtonsParams()
            ],
            "viewtopic_body_postrow_post_details_after" => "post-axx",
            "viewtopic_body_postrow_post_after"         => "post-axxbot",
            "posting_editor_message_before"             => [
                'sourceTwig'    => "posting_editor_message_before",
                'params'        => [ "Article" => $this->factory->createArticle()->load(Article::ID_FORUM_IMAGES)]
            ],
            "overall_footer_content_after"              => "90-overall-footer",
            "overall_footer_after"                      => "99-footer"
        ];

        foreach($arrTpl as  $destinationFile => $sourceData){

            if( is_string($sourceData) ) {

                $sourceTwig     = $sourceData;
                $arrTwigParams  = [];

            } else {

                $sourceTwig     = $sourceData['sourceTwig'];
                $arrTwigParams  = $sourceData['params'];
            }

            $html = $generatedFileBanner . $this->twig->render("forum/$sourceTwig.html.twig", $arrTwigParams);
            file_put_contents("$outputDir$destinationFile.html", $html);
        }

        return $this->endWithSuccess();
    }


    protected function getBaseParams() : array
    {
        return [
            'openSquareBraket'  => '[',
            'closeSquareBraket' => ']',
            'forumIdTLI'        => Forum::ID_TLI,
            'forumIdComments'   => Forum::ID_COMMENTS
        ];
    }


    protected function buildHeaderParams() : array
    {
        return array_merge($this->getBaseParams(), [
            'ArticleIssueGuide' => $this->factory->createArticle()->load(Article::ID_ISSUE_REPORT)
        ]);
    }


    protected function buildRegisterParams() : array
    {
        $artRules   = $this->factory->createArticle()->load(Article::ID_FORUM_RULES);
        $htmlRules  = $artRules->getBodyForDisplay();

        //
        $dom = new DOMDocument();
        libxml_use_internal_errors(true);
        $dom->loadHTML('<?xml encoding="utf-8" ?>' . $htmlRules, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
        libxml_clear_errors();

        $xpath = new DOMXPath($dom);
        $paragraphs = $xpath->query('//p[img]');

        foreach ($paragraphs as $p) {
            // Get all img elements within this paragraph
            $images = $xpath->query('.//img', $p);

            // Move each image outside the paragraph (insert before the p tag)
            foreach ($images as $img) {

                $img->setAttribute('class', 'tli-register-rules-spotlight');
                $p->parentNode->insertBefore($img, $p);
            }

            // Check if the paragraph is now empty (no text content and no child nodes)
            $textContent = trim($p->textContent);
            if (empty($textContent) && $p->childNodes->length === 0) {
                // Remove the empty paragraph
                $p->parentNode->removeChild($p);
            }
        }

        $htmlRulesProcessed = $dom->saveHTML();
        $htmlRulesProcessed = preg_replace('/^<\?xml encoding="utf-8" \?>\s*/', '', $htmlRulesProcessed);

        $artPrivacyPolicy = $this->factory->createArticle()->load(Article::ID_PRIVACY_POLICY);

        return array_merge($this->getBaseParams(), [
            'mainText' => $htmlRulesProcessed,
            'PrivacyPolicy' => [
                'url'   => $artPrivacyPolicy->getUrl(),
                'title' => $artPrivacyPolicy->getTitle()
            ],
        ]);
    }


    protected function buildPostButtonsParams() : array
    {
        return array_merge($this->getBaseParams(), [
        ]);
    }
}
